<?php

namespace iHMSTest\EventDispatcher;

use iHMS\EventDispatcher\EventDispatcher;
use iHMS\EventDispatcher\Listener\EventListener;
use iHMS\EventDispatcher\IEventDescription;
use iHMS\EventDispatcher\Listener\EventListenerResults;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-08-23 at 20:02:17.
 */
class EventDispatcherTest extends \PHPUnit_Framework_TestCase
{
    public $message = null;

    /**
     * @var EventDispatcher Event dispather instance
     */
    protected $_eventDispatcher;

    /**
     * Create event dispatcher object
     * @return EventDispatcherTest
     */
    protected function setUp()
    {
        $this->_eventDispatcher = new EventDispatcher;

        return $this;
    }

    /**
     * Destroy the event dispatcher object
     *
     * @return EventDispatcherTest
     */
    protected function tearDown()
    {
        $this->_eventDispatcher = null;

        return $this;
    }

    /**
     * Tests for the iHMS\EventDispatcher\EventDispatcher::addEventListener method
     *
     * - should add given event if do not already exists
     * - should register given listener for the given event with the given priority
     * - should accept passing array of event names
     * - listener callback when passing array of event names should be same
     * - should return either return an EventListener object or an array of EventListener objects in case array
     *  of event names is passed in
     *
     * @covers iHMS\EventDispatcher\EventDispatcher::addEventListener
     * @return void
     */
    public function testAddEventListener()
    {
        $listener = $this->_eventDispatcher->addEventListener('test', array($this, __METHOD__));
        $this->assertTrue($listener instanceof EventListener, 'addEventListener(): should return an EventListener object');
        unset($listener);

        $this->tearDown()->setUp();
        $listener = $this->_eventDispatcher->addEventListener('test', array($this, __METHOD__));
        $this->assertContains($listener, $this->_eventDispatcher->getListeners('test'), 'addEventListener(): should add listener to event');
        unset($listener);

        $this->tearDown()->setUp();
        $this->_eventDispatcher->addEventListener('test', array($this, __METHOD__));
        $this->assertContains('test', $this->_eventDispatcher->getEvents(), "addEventListener(): should add event if it doesn't exists");

        $this->tearDown()->setUp();
        $callback = function ($e) {
            /** @var $e EventListener */
            return $e->getEventName();
        };
        $this->_eventDispatcher->addEventListener(array('foo', 'bar'), $callback);
        $events = $this->_eventDispatcher->getEvents();
        $this->assertContains('foo', $events, 'addEventListener(): should allow passing array of event names');
        $this->assertContains('bar', $events, 'addEventListener(): should allow passing array of event names');
        foreach ($events as $event) {
            $listeners = $this->_eventDispatcher->getListeners($event);

            /** @var $listener EventListener */
            foreach ($listeners as $listener) {
                $this->assertSame($callback, $listener->getCallback(), 'addEventListener(): listeners from events should have same callback');
            }
        }
        unset($callback, $event, $listeners, $listener);

        $this->tearDown()->setUp();
        $listeners = $this->_eventDispatcher->addEventListener(array('foo', 'bar'), array($this, __METHOD__));
        $this->assertInternalType('array', $listeners, 'addEventListener(): should return array');
        $this->assertCount(2, $listeners, 'addEventListener(): should return expected count of listeners');
        $this->assertContainsOnly('iHMS\EventDispatcher\Listener\EventListener', $listeners, false, 'addEventListener(): should return array containing only listener objects');
    }

    /**
     * Tests for the iHMS\EventDispatcher\EventDispatcher::removeEventListener method
     *
     * - should remove the given listener
     * - should return false in case the given listener is not found
     * - should return true in case the given listener is found and successfuly removed
     *
     * @covers iHMS\EventDispatcher\EventDispatcher::removeEventListener
     * @return void
     */
    public function testRemoveEventListener()
    {
        $listener = $this->_eventDispatcher->addEventListener('test', array($this, __METHOD__));
        $this->_eventDispatcher->removeEventListener($listener);
        $this->assertNotContains($listener, $this->_eventDispatcher->getListeners('test'), 'removeEventListener(): should remove listener from event');
        unset($listener);

        $this->tearDown()->setUp();
        $listener = $this->_eventDispatcher->addEventListener('test', array($this, __METHOD__));
        $this->_eventDispatcher->removeEventListeners('test');
        $this->assertFalse($this->_eventDispatcher->removeEventListener($listener), "removeEventListener(): should return false if event doesn't exists");
        unset($listener);

        $this->tearDown()->setUp();
        $listener1 = $this->_eventDispatcher->addEventListener('test', array($this, __METHOD__));
        $this->_eventDispatcher->removeEventListeners('test');
        $this->_eventDispatcher->addEventListener('test', array($this, __METHOD__));
        $this->assertFalse($this->_eventDispatcher->removeEventListener($listener1), "removeEventListener(): should return false if listener doesn't exists");
    }

    /**
     * Tests for iHMS\EventDispatcher\EventDispatcher::addEventSubscriber method
     *
     * - should register all listeners provided by the given event subscriber
     * - should return value that come from the event subscriber
     *
     * @covers iHMS\EventDispatcher\EventDispatcher::addEventSubscriber
     * @return void
     */
    public function testAddEventSubscriber()
    {
        $subscriber = new TestAsset\MockSubscriber();
        $method = $this->_eventDispatcher->addEventSubscriber($subscriber);
        $this->assertSame('iHMSTest\EventDispatcher\TestAsset\MockSubscriber::subscribe', $method, 'addEventSubscriber(): return value should come from subscriber register() method');
        $events = $this->_eventDispatcher->getEvents();
        $this->assertContains('foo', $events, "addEventSubscriber(): should contains 'foo' event");
        $this->assertContains('bar', $events, "addEventSubscriber(): should contains 'bar' event");
    }

    /**
     * Tests for iHMS\EventDispatcher\EventDispatcher::removeEventSubscriber method
     *
     * - should remove all listeners provided by the given event subscriber
     * - should return value that come from the given event subscriber
     *
     * @covers iHMS\EventDispatcher\EventDispatcher::removeEventSubscriber
     * @return void
     */
    public function testRemoveEventSubscriber()
    {
        $subscriber = new TestAsset\MockSubscriber();
        $this->_eventDispatcher->addEventSubscriber($subscriber);
        $listener = $this->_eventDispatcher->addEventListener('foo', array($this, __METHOD__));
        $method = $this->_eventDispatcher->removeEventSubscriber($subscriber);
        $listeners = $this->_eventDispatcher->getListeners('foo');
        $this->assertContains('foo', $this->_eventDispatcher->getEvents(), "removeEventSubscriber(): should contains expected event");
        $this->assertCount(1, $listeners, 'removeEventSubscriber(): should contains expected count of listeners');
        $this->assertContains($listener, $listeners, "removeEventSubscriber(): should contains expected listener");
        $events = $this->_eventDispatcher->getEvents();
        $this->assertNotContains('bar', $events, "removeEventSubscriber(): should not contains unexpected event");
        $this->assertSame('iHMSTest\EventDispatcher\TestAsset\MockSubscriber::unsubscribe', $method, 'removeEventSubscriber(): return value should come from subscriber unregister() method');
    }

    /**
     * Test for iHMS\EventDispatcher\EventDispatcher::dispatchEvent method
     *
     * - should trigger all listeners registered for the given event
     * - should return ListenerResult object containing all listener expected return values
     * - should returns as soon as condition callback return true
     * - should mark the ListenerResult object as stopped when condition callback met or when asked by event
     *
     * @covers iHMS\EventDispatcher\EventDispatcher::dispatchEvent
     * @return void
     */
    public function testDispatchEvent()
    {
        // dispatchEvent() should trigger registered listeners
        $this->_eventDispatcher->addEventListener('test', array($this, 'handleTestEvent'));
        $this->_eventDispatcher->dispatchEvent('test', $this, array('message' => 'test message'));
        $this->assertEquals('test message', $this->message, 'dispatchEvent(): should trigger registered listeners');

        // dispatchEvent() should return all listener return values
        $this->tearDown()->setUp();
        $this->_eventDispatcher->addEventListener('test', function ($e) {
            /** @var $e IEventDescription */
            $string = $e->getParam('string', 'default value');
            return trim($string);
        });
        $this->_eventDispatcher->addEventListener('test', function ($e) {
            /** @var $e IEventDescription */
            $string = $e->getParam('string', 'default value');
            return str_rot13($string);
        });
        $results = $this->_eventDispatcher->dispatchEvent('test', $this, array('string' => ' foo '));
        $this->assertTrue($results instanceof EventListenerResults, 'dispatchEvent(): should return all listener return values');
        $this->assertEquals(2, $results->count(), 'dispatchEvent(): should return all listener return values');
        $this->assertEquals('foo', $results->getFirstResult(), 'dispatchEvent(): should return all listener return values');
        $this->assertEquals(str_rot13(' foo '), $results->getLastResult(), 'dispatchEvent(): should return all listener return values');
        unset($results);

        // dispatchEvent() should returns as soon as condition callback return true

        $this->tearDown()->setUp();
        $this->_eventDispatcher->addEventListener('foo', function ($e) {
            /** @var $e IEventDescription */
            $string = $e->getParam('string', '');
            $search = $e->getParam('search', '?');
            return strpos($string, $search);
        });

        $this->_eventDispatcher->addEventListener('foo', function ($e) {
            /** @var $e IEventDescription */
            $string = $e->getParam('string', '');
            $search = $e->getParam('search', '?');
            return strstr($string, $search);
        });
        $results = $this->_eventDispatcher->dispatchEvent('foo', $this, array('string' => 'foo', 'search' => 'f'), array($this, 'evaluateStringCallback'));
        $this->assertTrue($results instanceof EventListenerResults, 'dispatchEvent(): should returns as soon as condition callback return true');
        $this->assertSame(0, $results->getLastResult(), 'dispatchEvent(): should returns as soon as condition callback return true');
        unset($results);

        // ListenerResults returned by dispatchEvent() should contains expected values
        $this->tearDown()->setUp();
        $this->_eventDispatcher->addEventListener('test', function ($e) {
            /** @var $e IEventDescription */
            $string = $e->getParam('string', '');
            return trim($string);
        });
        $this->_eventDispatcher->addEventListener('test', function ($e) {
            /** @var $e IEventDescription */
            $string = $e->getParam('string', '');
            return str_rot13($string);
        });
        $results = $this->_eventDispatcher->dispatchEvent('test', $this, array('string' => ' foo '));
        $this->assertTrue($results->hasResult('foo'), 'dispatchEvent(): ListenerResults returned by dispatchEvent() should contains expected values');
        $this->assertTrue($results->hasResult(str_rot13(' foo ')), 'dispatchEvent(): ListenerResults returned by dispatchEvent() should contains expected values');
        $this->assertFalse($results->hasResult(' foo '), 'dispatchEvent(): ListenerResults returned by dispatchEvent() should contains expected values');

        unset($results);

        // dispatchEvent() should mark ListenerResults as stopped when needed

        $this->tearDown()->setUp();
        $this->_eventDispatcher->addEventListener('test', function () {
            return 'vhcs';
        }, 4);
        $this->_eventDispatcher->addEventListener('test', function () {
            return 'ispcp';
        }, 3);
        $this->_eventDispatcher->addEventListener('test', function () {
            return 'imscp';
        }, 2);
        $this->_eventDispatcher->addEventListener('test', function () {
            return 'ihms';
        }, 1);
        $results = $this->_eventDispatcher->dispatchEvent('test', $this, array(), function ($result) {
            return ($result === 'imscp');
        });
        $this->assertTrue($results instanceof EventListenerResults, 'dispatchEvent(): should mark ListenerResults as stopped when needed');
        $this->assertTrue($results->isStopped(), 'dispatchEvent(): should mark ListenerResults as stopped when needed');
        $result = $results->getLastResult();
        $this->assertEquals('imscp', $result, 'dispatchEvent(): should mark ListenerResults as stopped when needed');
        $this->assertFalse($results->hasResult('ihms'), 'dispatchEvent(): should mark ListenerResults as stopped when needed');
    }

    /**
     * Test for iHMS\EventDispatcher\EventDispatcher::hasEventListener method
     *
     * - should return true when the given event is found, false otherwise
     *
     * @covers iHMS\EventDispatcher\EventDispatcher::hasEventListener
     * @return void
     */
    public function testHasEventListener()
    {
        $listener1 = $this->_eventDispatcher->addEventListener('test', array($this, __METHOD__));
        $listener2 = $this->_eventDispatcher->addEventListener('test', array($this, __METHOD__));
        $this->assertTrue($this->_eventDispatcher->hasEventListener('test'), 'hasEventListener(): event should have registered listeners for it');
        $this->assertCount(2, $this->_eventDispatcher->getListeners('test'), 'hasEventListener(): event should have expected count of listeners registered for it');
        $this->_eventDispatcher->removeEventListener($listener1);
        foreach ($this->_eventDispatcher->getListeners('test') as $listener) {
            $this->assertTrue($listener === $listener2, 'hasEventListener(): event should have expected listeners registered for it');
        }
    }

    /**
     * Test for iHMS\EventDispatcher\EventDispatcher::getEvents method
     *
     * @covers iHMS\EventDispatcher\EventDispatcher::getEvents
     * @return void
     */
    public function testGetEvents()
    {
        $this->assertInternalType('array', $this->_eventDispatcher->getEvents(), 'getEvents(): should return array');
        $this->assertEmpty($this->_eventDispatcher->getEvents(), 'getEvents(): should return empty array when no event are registered');
        $this->_eventDispatcher->addEventListener(array('foo', 'bar'), array($this, __METHOD__));
        $this->assertContains('foo', $this->_eventDispatcher->getEvents(), 'getEvents(): should return registered events');
        $this->assertContains('bar', $this->_eventDispatcher->getEvents(), 'getEvents(): should return registered events');
    }

    /**
     * @covers iHMS\EventDispatcher\EventDispatcher::getListeners
     * @todo   Implement testGetListeners().
     */
    public function _testGetListeners()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers iHMS\EventDispatcher\EventDispatcher::RemoveEventListeners
     * @todo   Implement testRemoveEventListeners().
     */
    public function _testRemoveEventListeners()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @param $e IEventDescription
     */
    public function handleTestEvent($e)
    {
        $message = $e->getParam('message', 'default value');
        $this->message = $message;
    }

    /**
     * @param string $value
     * @return bool
     */
    public function evaluateStringCallback($value)
    {
        return (!$value);
    }
}
